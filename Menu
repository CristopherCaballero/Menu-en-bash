 #!/bin/bash

/usr/bin/clear
echo "MENU-POSIX"
echo "Ing.en Datos e Inteligencia Organizacional"
echo "Caballero Fuentes Cristopher Fernando"
echo "------------------------------------"

opcion="ninguna"

function holamundo.sh
{
   echo -e "Holamundo \c"
   read
   return 0
}

function hola2.sh
{
   SALUDO="Hola mundo vamos al partido de la champions"

echo -n "Este script dice: "
echo ${SALUDO}
   read
   return 0
}

function variables.sh
{
una_variable=19
MI_NOMBRE=CRISTOPHER"
Nombres=Dainis Felicia Ana Almendra"
BOOLEANO=true
echo "Wachemos las variables "
echo "Un numero: ${una_variable}"
echo "Un nombre: ${MI_NOMBRE}"
ECHO "Un grupo de nombres: ${NOMBRES}"

echo "Has invocado el script pasándome ${0} eta ${1} "

echo "Me has pasado demasiados argumentos papa no manches UwU"

echo IDa: ${!} y $@

echo "Mi directorio actual: ${PWD} y mi usuario ${UID}"
   read
   return 0
}

function arrays.sh
{
   asociaciones[0]="La Champions League"
asociaciones[1]="Real Madrid"
asociaciones[2]="NavarradotNET"
asociaciones[3]="Riberlug"

# Otra forma de definirlos
partidos=("UPN" "Real Madrid vs Juventus" "SCDN" "IUN" "Nafarroa BAI" "RCN" )
numeros=(15 23 45 42 23 1337 23 666 69)

echo ${asociaciones[0]} es un torneo internacional de clubes europeos y ${partidos[1]} un partido
   read
   return 0
}
         
function otrosusos.sh
{
   NOMBRE="Navarrux Live edition"
echo ${NOMBRE} una parte ${NOMBRE:8} y otra ${NOMBRE:8:4}

# Valores por defecto.
# ${variable:­valorpordefecto}
SINVALOR=
echo "Variable SINVALOR: ${SINVALOR:0} eta ${VACIO:­'Miguel Indurain'}"
echo "La variable SINVALOR no tiene valor alguno ${SINVALOR} "

# Esto es igual pero el valor queda establecido
# ${variable:=valorpordefecto}
echo "Variable SINVALOR: ${SINVALOR:=31337} eta ${VACIO:='Miguel Indurain'}"
echo "La variable SINVALOR no tiene valor alguno ${SINVALOR} "

# Y lo contrario: si la variable SÍ tiene valor, se le pone otro
# ${variable:+valorpordefecto}
PROGRAMA='sniffit'
echo "valor de PROGRAMA: ${PROGRAMA:+'tcpdump'} y ahora ${PROGRAMA}"

# Si la variable está sin definir o vacía se muestra un error. En caso
# contrario se le asigna un valor por defecto
# ${variable:?valorpordefecto}
echo "Valor de: ${EJEMPLO:?'Roberto'} y luego {EJEMPLO}"

# Otros
# ${!prefijo*} : nos devuelve una lista de las variables que comienzan
# con determinado prefijo.
# Podemos probar con el for:
for i in ${!P*};do echo $i ; done
   read
   return 0
}

function aritmeticas.sh
{
VALOR1=19
VALOR2=45

# Para las operaciones puede usarse expr o []

RESULTADO=`expr ${VALOR1} + ${VALOR2}`
echo "Resultado: ${RESULTADO}"

RESULTADO=`expr ${VALOR1} + ${VALOR2} + 3`
echo "Resultado: ${RESULTADO}"


VALOR1=10
VALOR2=4
echo "${VALOR1} y ${VALOR2}"

RESULTADO=$[${VALOR1} + ${VALOR2} + 9]
echo "Ahora: ${VALOR1} + ${VALOR2} + 9= ${RESULTADO}"


RESULTADO=$[${VALOR1} + $[${VALOR2} * 5]]
echo "Ahora: ${VALOR1} + ${VALOR2} * 5 = ${RESULTADO}"
   read
   return 0
}

function logica.sh
{
## operaciones lógicas

# && : and
# || : or
# ! : not

booleano=true

# Si la variable booleano es true veremos por pantalla "OK"
$booleano && echo "OK" || echo "no es true"

otrobool=!${booleano}

test ${otrobool} || echo "Ahora es falso"


# Mediante && podemos encadenar comandos
#who && ps -axf && echo "OK"


## comparaciones : -eq, -ne, -lt, -le, -gt, or -ge

valor=19

test $valor -le 19 && echo "Se cumple"

# Asignaciones

nuevo=${valor}

test ${nuevo} -eq ${valor} && echo "Son los mismos numeros"

echo "Por lo tanto ${nuevo} es lo mismo que ${valor}"
   read
   return 0
}

function condicionales.sh
{
   # Condicionales

VARIABLE=45

if [ ${VARIABLE} -gt 0 ]; then
echo "${VARIABLE} es mayor que 0"
fi

# Podemos meter el then en la siguiente linea
if [ -e /etc/shadow ]
then
echo "OK, parece que tienes un sistema con shadow pass"
fi


## Estructura if-else

OTRA=-23

if [ ${OTRA} -lt 0 ]
then
echo "${OTRA} es menor que 0"
else
echo "${OTRA} es mayor que 0";
fi

## Estructura if-elseif


# Vamos a usar "read" para pedirle datos al usuario

echo -n "Mete un valor: "
read VALOR1
echo -n "Mete otro valor: "
read VALOR2

echo "Has introducido los valores ${VALOR1} y ${VALOR2}
if [ ${VALOR1} -gt ${VALOR2} ]
then
echo "${VALOR1} es mayor que ${VALOR2}"
if[ ${VALOR1} -lt ${VALOR2} ]
then
echo "${VALOR1} es menor que ${VALOR2}"
else
echo "${VALOR1} y ${VALOR2} son iguales
   read
   return 0
}

function comprobaciones.sh
{
   # script para comprobar si un fichero existe. Espera un parámetro
if [ -e $1 ] && [ -f $1 ]
then
echo "OK, el fichero existe ya te puedes ir con el 10"
else echo "NO existe"
fi

# Para comprobar la negación usaríamos el símbolo: !
if [ ! -e $1 ]
then
echo “No existe”
fi
   read
   return 0
}

function case.sh
{
echo "NOMBRE="
echo -n "Dame un nombre: "
read NOMBRE
case ${NOMBRE} in
   Mordekaiser)
       echo "${NOMBRE} dice: me dedico a matar a los que se pongan en mi camino"
       ;;
Donaji)
    echo "${NOMBRE} dice: tengo un blog friki"
    ;;
Dainis)
   echo "${NOMBRE} dice: Me gusta mi novio"
   ;;
Almendra)
   echo "${NOMBRE} dice: Halo mola"
   ;;
     *)
     echo "A ${NOMBRE} no lo conozco"
    esac
   read
   return 0
}

function interacciones.sh
{
   ## un for simple

echo "FOR simple: "
for i in a b c d e f g h i
do
 echo "letra: $i"
done
## for para recorrer array
NOMBRES="Iñigo Sten Asier Pello Roberto"
echo "FOR simple para recorrer un array: "

echo "Participantes en la 4party: "

for i in ${NOMBRES}
do
      echo ${i}
done
## for con el resultado de un comando
echo "FOR con el resultado de un comando"

for i in `cat direcciones.txt`
do
      echo ${i}
done

## for con un grupo de ficheros
echo "FOR con ficheros"

for i in *.sh
do
     ls -lh ${i}
done
## for clásico con un índice
echo "FOR clásico "

for (( cont=0 ; ${cont} < 10 ; cont=`expr $cont + 1` ))
do
       echo "Ahora valgo> ${cont}"
done
   read
   return 0
}

function While.sh
{
   ## Estructura while
echo "WHILE en marcha"

cont=0

# Un bucle que terminará cuando $cont sea mayor que 100
while (test ${cont} -lt 190)
do

    cont=`expr $cont + 19`
    echo "Valor del contador: ${cont}"
done

echo "Valor final del contador: ${cont}"

## Un while infinito
# while true; do comando; done
   read
   return 0
}

function Until.sh
{
   ## El bucle until
# Un bucle until se ejecuta hasta que el test resulte falso

echo "Estructura until"

cont=57

until (test ${cont} -lt 0)
do
    cont=`expr $cont - 1`
    echo "Valor del contador: ${cont}"
done

 echo "Valor final del contador: ${cont}"
   read
   return 0
}

function Select.sh
{
   echo "Select de distros"

DISTROS="Debian Ubuntu Navarrux Gentoo Mandriva"

echo "Selecciona la mejor opción por favor: ${resultado}"

select resultado in ${DISTROS}
do
   # Si la longitud de cadena de resultado es > 0 ya está seleccionado
 (test ${#resultado} -ne 0 ) && break

 echo "Selecciona la mejor opción por favor: ${resultado}"

done

echo "Sistema seleccionado: [${resultado}] longitud de cadena: ${#resultado}"
   read
   return 0
}

function funciones.sh
{
   RESULTADO=0

# Una función que muestra valores por pantalla
muestrapantalla () {
echo "Valores: $0> $1 y $2 y $3"
}

# Puede usarse return pero solo para devolver números
sumame () {
     echo "Estamos en la función: ${FUNCNAME}"
     echo "Parametros: $1 y $2"
     RESULTADO=`expr ${1} + ${2}`
     return 0
}

# Es posible la función recursiva
boom () {
     echo "No ejecutes esto... "
     boom
}

# La llamada de se puede hacer así, sin paréntesis
muestrapantalla 3 4 "epa"

# Llamamos a la función y si devuelve 0 es correcto.
sumame 45 67 && echo "OK" || echo "Ocurrió un error"

echo "Resultado: ${RESULTADO} $!"
   read
   return 0
}


function librerias.sh
{
   source librerias.sh
muestrapantalla 69 123 "epa"

sumame 1337 3389 && echo "OK" || echo "Ocurrió un error"
echo "Libreria 19"

echo "Resultado: ${19} $!"
   read
   return 0
}

function señales.sh
{
   echo -e " ufff que sueño
 ufff que sueño
 ufff que sueño \c"
   read
   return 0
}

function colores.sh
{
   echo -e "\033[40m\033[37m Blanco      \033[0m"
echo -e "\033[40m\033[1;37m Gris claro \033[0m"
echo -e "\033[40m\033[30m Negro \033[0m (esto es negro)"
echo -e "\033[40m\033[1;30m Gris \033[0m"
echo -e "\033[40m\033[31m Rojo \033[0m"
echo -e "\033[40m\033[1;31m Rojo claro \033[0m"
echo -e "\033[40m\033[32m Verde \033[0m"
echo -e "\033[40m\033[1;32m Verde claro \033[0m"
echo -e "\033[40m\033[33m Marrón \033[0m"
echo -e "\033[40m\033[1;33m Amarillo \033[0m"
echo -e "\033[40m\033[34m Azul \033[0m"
echo -e "\033[40m\033[1;34m Azul claro \033[0m"
echo -e "\033[40m\033[35m Purpura \033[0m"
echo -e "\033[40m\033[1;35m Rosa \033[0m"
echo -e "\033[40m\033[36m Cyan \033[0m"
echo -e "\033[40m\033[1;36m Cyan claro \033[0m"

# Se pueden poner fondos de otro color:
echo -e "\033[42m\033[31m Navarrux v1.0 \033[0m"

echo -e "\033[40m\033[4;33m Amarillo \033[0m"
   read
   return 0
}

function labs1.sh
{
   echo "#LAB 1 - Comandos basicos para navegar en carpeta"

echo "#1 Iniciar sesion en el sistema"
echo "#login with user and password"

echo "#2 Verificar el directorio"
echo "pwd"

echo "#3 crear la carpeta "dir1" "

echo "#4 Crear la carpeta "dir2" "
echo "mkdir -v dir2"

echo "#5 Crear la carpeta "dir3" dentro de "dir2" "
echo "mkdir -v dir2/dir3"

echo "#6 Crear la carpeta "dir4" dentro de "dir3" "
echo "mkdir -v dir2/dir3/dir4"

echo "#Puedes usar mkdir -vp dir2/dir3/dir4 para hacer los pasos 3,4 y 5 en un solo comando."

echo "#7 Lista el contenido el directorio actual"
echo "ls"

echo "# - El maestro: Si, el chico con la playera azul. Si! Tu, ¿porque pareces confundido?"
echo "# - El morro confundido: Cree 4 carpetas, ¿donde estan dir3 y dir4?"

echo "#8 Lista todos los archivos en la carpeta actual de forma recursiva"
echo "ls -R"

echo "#9 Cambiarse a la carpeta dir2"
echo "cd dir2"

echo "#10 Regresa a la carpeta anterior"
echo "cd -"

echo "#11 Cambiate a la carpeta home del usuario actual"
echo "cd"
   read
   return 0
}

function labs2.sh
{
   echo "#LAB 2 - Crear archivos. desplegar su contenido y estadisticas"

echo "#1 Crear el archivo file1.txt"
echo "touch file1.txt"

echo "#2 Cambia el timestamp del archivo file1.txt"
echo "file1.txt"

echo "#3 Crea el archivo file2.txt"
echo "touch file2.txt"

echo "#4 Despliega el contenido del directorio actual usando un comando diferente a ls"
echo "dir"

echo "# dir es equivalente a ls -C -b"

echo "#5 limpia el contenido de la terminal"
echo "clear"

echo "#6 Despliega el texto "hello" "
echo "hello"

echo "#7 Redirige la salida del comando anterior hacia un archivo"
echo "hello > hello.txt"

echo "#8 Adjunta el texto "linux" al archivo hello.txt"
echo "linux >> hello.txt"

echo "#9 Adjunta el texto "world" al archivo hello.txt"
echo "world >> hello.txt"

echo "#10 Despliega en la pantalla el contenido del archivo hello.txt"
echo "cat hello.txt"

echo "#11 Despliega en la pantalla el contenido del archivo hello.txt usando el comando head"
echo "head hello.txt"

echo "#12 Despliega solo las ultimas dos lineas del archivo hello.txt
echo "tail -2 hello.txt"

echo "#13 Despliega las ultimas lineas del archivo hello.txt"
echo "tail hello.txt"

echo "#14 Muestra las estadisticas para el archivo hello.txt"
echo "stat hello.txt"

echo "#15 Muestra las estadisticas para la carpeta dir1"
echo "stat dir1" "
   read
   return 0
}

function labs3.sh
{
   echo "#LAB 3 - Copiar, renombrar, borrar archivos"

echo "#1 Despliega en pantalla el uso del disco de la carpeta actual"
echo "du"

echo "#2 Despliega en pantalla el uso del disco de la carpeta actual en un formato legible"
echo "du -xh ~"

echo "# Este comando podria tardar en carpetas de gran tamaño, asi que puedes optar por el parametro --max-depth"
echo "du --max-depth 3 ~"

echo "#3 Copia el archivo hello.txt a la carpeta dir2"
echo "cp -v hello.txt dir2"

echo "#4 Copia y renombra el archivo hello.txt a dir2/file2.txt"
echo "cp -v hello.txt dir2/file2.txt"

echo "#5 Copia todos los archivos con la extension .txt de la carpeta dir2 a la carpeta dir2/dir3"
echo "cp -vr  dir2/*.txt dir2/dir3"

echo "#6 Copia la carpeta dir2/dir3 al directorio actual"
echo "cp -vr dir2/dir3 ."

echo "#7 Muestra el contenido de la carpeta actual"
echo "ls"

echo "#8 Verifica la integridad de los archivo copiado hello.txt"
echo "md5sum hello.txt"
echo "md5sum dir2/hello.txt"

echo "#9 Mueve el archivo hello.txt a dir/2/dir3/dir4/hi.txt"
echo "mv hello.txt dir/2/dir3/dir4/hi.txt"

echo "#10 Muestra el contenido de la carpeta dir4"
echo "ls"

echo "#11 Crear la carpeta dir5"
echo "mkdir dir5"

echo "#12 Mueve todos los archivos de texto en dir2 hacia dir5"
echo "mv dir2/*.txt dir5"

echo "#13 Renombra la carpeta dir5 a dir50"
echo "mv dir5 dir50"

echo "#14 Crea un enlace llamado "hello" desde el directorio actual hacia dir2/dir3/dir4/hi.txt"
echo "ln dir2/dir3/dir4/hi.txt hello"
echo "# Verifica el inode de cada archivo"
   read
   return 0
}

function labs4.sh
{
   echo "#LAB 4 - Comandos basicos para administrar procesos"

echo "#1 Ejecuta el comando ps y analiza su salida"
echo "ps"

echo "#2 Crea un nuevo proceso"
echo "sleep 60 &"

echo "#3 Ejecuta ps y analiza su salida"
echo "ps"

echo "4 Mata el proceso creado en el paso 2 (Reemplaza 12345 por el ID del proceso)"
echo "kill 12345"

echo "#Verifica con ps si el proceso sigue vivo"
echo "ps"

echo "#5 Obliga al proceso a morir enviando la señal -9"
echo "kill -p 12345"

echo "#Verifica con ps si el proceso sigue vivo"
echo "ps"

echo "#6 Inicia dos procesos mas"
echo "sleep 30 &"
echo "sleep 30 &"

echo "#Verifica con ps si los procesos estan ejecutandose"
echo "ps"

echo "#7 Mata los procesos asociados al comando "sleep" "
echo "killall sleep"

echo "#8 Mata todos los procesos asociados al usuario actual (Reemplaza "user" con tu nombre de usuario)"
echo "killall -u user"

echo "#9 Mata todos los procesos asociados al comando "find" ejecutados por el usuario actual."
echo "killall -w find"

echo "#10 Obten el PID del proceso bash"
echo "pidof bash"

echo "pidof -s bash"

echo "#Utiliza el comando nice para cambiar la prioridad de un proceso"
echo "nice -n 19 sleep 30 &"
echo "renice -n 19 12345"
echo "renice +1 -u user"

   read
   return 0
}

while [ $opcion != "23"  ]
    do

        echo -e "\nMenu"
        echo -e "\t1) Hola mundo"
        echo -e "\t2) Hola mundo variable"
        echo -e "\t3) Variables"
        echo -e "\t4) Arrays"
        echo -e "\t5) Otros usos"
        echo -e "\t6) Aritmeticas"
        echo -e "\t7) Logica"
        echo -e "\t8) Condicionales"
        echo -e "\t9) Comprobaciones"
        echo -e "\t10) Case"
        echo -e "\t11) Interacciones"
        echo -e "\t12) While"
        echo -e "\t13) Until"
        echo -e "\t14) Select"
        echo -e "\t15) Funciones"
        echo -e "\t16) Librerias"
        echo -e "\t17) Señales"
        echo -e "\t18) Colores"
        echo -e "\t19) Lab 1"
        echo -e "\t20) Lab 2"
        echo -e "\t21) Lab 3"
        echo -e "\t22) Lab 4"
        echo -e "\t23) Salir del menu \n"
        echo -e "\tOpcion: \c"

        read opcion

        if [ -z $opcion ] ; then opcion="ninguna" ; fi

        case $opcion in
                "1" )
                      holamundo.sh
                      ;;
                "2" )
                      hola2.sh
                      ;;

                "3" )
                      variables.sh
                      ;;

                "4" )
                     arrays.sh
                      ;;
           "5" )
                     otrosusos.sh
                      ;;

                "6" )
                     aritmeticas.sh
                      ;;

                "7" )
                     logica.sh
                      ;;

                "8" )
                     condicionales.sh
                      ;;

                "9" )
                     comprobaciones.sh
                      ;;

                "10" )
                     case.sh
                      ;;

                "11" )
                     interacciones.sh
                      ;;

                "12" )
                     While.sh
                      ;;

                "13" )
                     Until.sh
                      ;;

                "14" )
                     Select.sh
                      ;;

                "15" )
                     funciones.sh
                      ;;

                "16" )
                     librerias.sh
                      ;;

                "17" )
                     señales.sh
                      ;;

                "18" )
                     colores.sh
                      ;;

                "19" )
                     labs1.sh
                      ;;

                "20" )
                     labs2.sh
                      ;;

                "21" )
                     labs3.sh
                      ;;

                "22" )
                     labs4.sh
                      ;;





                * )
                      ;;

        esac


        /usr/bin/clear
done




 echo -e "\n\nBBBBBB  YY    YY EEEEEEE"
 echo        "BB  BBB  YY YY   EE     "
 echo        "BB  BBB   YYY    EE     "
 echo        "BBBBBB    YYY    EEEEEE "
 echo        "BB  BBB   YYY    EE     "
 echo        "BB  BBB   YYY    EE     "
 echo -e     "BBBBBB    YYY    EEEEEEE\n\n"


